import UIKit

var str = "Hello, playground"


//    ===============================================
//    Task 1: Library
//    ===============================================
//
//    1. Создайте класс книга, которая содержит свойства:
//        - автор
//        - название
//        - цвет обложки
//      Реализуйте функцию, которая выводит в консоль информацию о книге.
//    2. Создайте структуру электронная книга, которая содержит все те же свойства, что и книга из первого пункта
//    3. Создайте структуру библиотека, которая содержит в себе массив книг и массив электронных книг.
//    4. Реализуйте функцию в библиотеке, которая даёт вам почитать первую бумажную и электронную книгу (функция возвращает тьюпл). Если какой-нибудь массив пустой, то верните вместо книги nil
//    5. Создайте функцию, которая выводит в консоль информацию и первых книгах в библиотеке.
//    6. Создайте библиотеку, наполните ее книгами.
//    7. Возьмите книги из библиотеки, записав результат вызова функции в переменные eBook и book
//    8. Предположим, что вы залили обложку бумажной книги кофе. Измените цвет обложки обычной книги на чёрный.
//    9. Поменяйте цвет электронной книги на жёлтый.
//    10. Выведите информацию о книгах, которые вы взяли в библиотеке и сравните информацию с первыми книгами, которые лежат сейчас в библиотеке. Совпадают ли обложки? Почему?
//
//    ===============================================
//    Task 2: Student
//    ===============================================
//
//    1. Создайте структуру, которая описывает студента, содержащую следующие свойства:
//        - имя
//        - фамилия
//        - отчество
//        - средний балл - по умолчанию 7.0
//        - изучаемся специальность — представлена перечислением ‘Speciality’
//        - флаг начисляется ли студенту стипендия: опционал. Задайте значение по умолчанию nil
//        - массив оценок, полученных студентом
//    2. Создайте вложенное перечисление Speciality со специальностями на ваш выбор
//    3. Создайте функцию calculateAverageMark в структуре студента, которая будет высчитывать средний балл в зависимости от массива оценок и присваивать средний бал в соответствующее свойство структуры. Если средний бал меньше 7, то студент не получает стипендию.
//    4. Создайте функцию, которая принимает массив оценок. Воспользуйтесь ярлыком аргумента. Добавьте оценки из параметра функции в локальную переменную структуры. Вызовите функцию расчета среднего балла
//    5. Создайте функцию clearStudentResults, которая очищает массив оценок студента, устанавливает среднюю оценку 0 и флаг стипендии в nil
//    6. Создайте функцию, которая выводит всю информацию о студенте в консоль
//    7. Создайте функцию, которая возвращает сумму стипендии. Стипендия вычисляется в зависимости от среднего балла и специальности.
//    Базовая стипендия — 75. За каждый бал выше 7, увеличивайте базовую стипендию на 10 процентов. Если студент юрист, инженер-программист или учитель, то увеличьте стипендию ещё на 5%
//    7. Создайте экземпляр структуры студент, проинициализировав его нужными свойствами и оценками: 7, 8, 5, 4, 9, 10, 9
//    8. Вызовите функцию расчета среднего бала студента и его стипендии
//    9. Вызовите функцию, которая добавляет оценки студента, передав ей массив из рандомных оценок от 0 до 10
//    10. Вызовите функцию расчета среднего бала студента и стипендии
//    11. Выведите в консоль всю информацию о студенте
//    12. Вызовите функцию очистки результатов студента
//
//    ===============================================
//    Task 3: Group
//    ===============================================
//    1. Создайте класс ‘StudentGroup’
//    2. Добавьте в него свойства:
//        - массив студентов (структура из первого задания)
//        - староста (студент из первого задания). Опционал
//        - номер группы
//    3. Добавьте функцию, которая принимает массив студентов и добавляет студентов в группу
//    4. Добавьте функцию, которая принимает одного студента и добавляет в массив студентов
//    5. Добавьте функцию выбора старосты, которая случайным образом выбирает человека из массива студентов и назначает старостой. Функция возвращает старосту, либо отсутствующее значение, если старосту не удалось выбрать или группа пуста.
//    6. Создайте группу, добавив туда студентов.
//    7. Выведите всех студентов в консоль, вызвав функцию вывода информации о каждом из них
//    8. Выберите старосту
//    9. Измените специальность старосты, обратившись к свойству (староста)
//    10. Поменялась ли специальность старосты в массиве студентов? Почему и как этого можно добиться?
//
//    ===============================================
//    Task 4: Speciality
//    ===============================================

//Вынесите перечисление специальности студента из структуры в отдельную сущность. Измените код из пункта 1 и 2 так, чтобы компилятор не ругался
//
//1. Добавьте функцию внутри перечисления, которая определяет является ли специальность гуманитарной. Для этого вам потребуется сделать switch self. Помните, что несколько case можно писать через запятую.
//2. Добавьте функцию, которая возвращает локализированное на русский язык название специальности.
