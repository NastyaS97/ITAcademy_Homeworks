//import UIKit
//
//var str = "Hello, playground"
//
//    ===============================================
//           Task 1 (Задание 3 из плэйграунда)
//    ===============================================
//
//    1. Реализуйте класс Ученик, у которого есть:
//     - Массив оценок по предметам (от 1 до 10)
//     - Коэффициент - параметр, по которому будет производиться расчет суммы на карманные расходы (по умолчанию - 10)
//     - Средняя оценка: Readonly computed property
//     - Карманные деньги: Computed property. Вычисляется на основе средней оценки, умноженной на коэффециент
//    2. Если параметру карманные деньги присваивается новое значение, должен выполняться перерасчёт коэффициента
//    3. Создайте экземпляр класса ученик. Выведите в консоль его среднюю оценку и карманные деньги (напишите для этого функцию в классе ученик).
//    4. Измените коэффециент на 15 и выведите карманные деньги.
//    5. Дайте ученику 500 единиц карманных денег и выведите коэффециент.
//
//    ===============================================
//                         Task 2
//    ===============================================
//
//    1. Создайте перечисление с марками автомобиля (Опель / Мерседес / Тойота и т.д.).
//    2. Добавьте в перечисление функции, которые возвращают русские и белорусские названия марок автомобилей.
//    3. Создайте класс автомобиль со следующими свойствами:
//      - марка
//      - тип топлива (бензин / дизель / газ / гибрид). Вложенное перечисление в класс автомобиль. По умолчанию бензин.
//      - КПП (ручная / автоматическая). Вложенное перечислениие в класс автомобиль.
//      - максимальный объем топлива
//      - текущее количество топлива.
//      - свободное место в баке. Вычисляемое значение (максимальное - текущее)
//      - владелец автомобиля. Опционал
//    4. Добавьте следующие функции в класс автомобиль:
//      - залить топливо. Принимает литры. Если свободного места в баке нет, то выполните ранний выход из функции не заливая топливо в бак. Иначе пополните бак.
//      - купить автомобиль. Принимает в виде аргумента того, кто покупает автомобиль.
//      Если владелец уже есть, то выполните ранниий выход из функции.
//      Иначе продайте автомобиль и залейте топливо в автомобиль до максимального уровня.
//    5. Создайте класс-фабрику, которая производит автомобили. У неё есть следующие свойства:
//      - словарь автомобилей, которые фабрика произвела, где ключ - марка автомобиля, а значение - массив автомобилей.
//      - массив всех марок автомобилей. Ленивая переменная
//      - количество топлива в машинах. Вычисляемая переменная. Возвращает сумму топлива, которое заливо в машинах. Если устанавливаем значением, то топливо равномерно заливается в те машины, у которых нет владельца.
//    6. Добавьте в фабрику следующие функции:
//      - произвести автомобиль. Принимает марку автомобиля и количество. Производит автомобили (создаёт экземпляр класса) и добавляет в словарь автомобилей.
//      - купить автомобиль. Принимает будущего владельца и марку. Если марка не указана, то выберите случайный автомобиль из массива всех марок и продайте его будущему владелцу. Если автомобиля такой марки нет, то создайте его. Не забудьте вызвать функцию покупки у самого автомобиля.
//    7. Создайте фабрику и произведите автомобили разных марок и разного количества.
//    Купите некоторые автомобили.
//    Залейте в случайный опель 20 литров топлива.
//    Выведите количество топлива в машинах.
//    Увеличьте количества топлива в машинах.
//
//    ===============================================
//                         Task 3
//    ===============================================
//
//    1. Создайте класс счёт пользователя - Account
//    2. Добавьте следующие свойства:
//    - имя счета. Закройте приватностью setter.
//    - цвет иконки. Ленивая переменная. По умолчанию - фиолетовый. После изменения цвета выводит в консоль сообщение с какого на какой цвет поменялась иконка.
//    - флаг можно ли пополнять счет. Сделайте переменную недоступной извне.
//    - количество бонусов. Доступно только для чтения извне, в классе возможно изменить (подумайте какой уровень приватности установить).
//    Перед установкой нового значения бонусов, проверяйте флаг пополнения счета и включите его, если пополнение счёта недоступно.
//    - баланс. Воспользуйтесь property access level, который при установке значения выполняет проверку на отрицательное значение зачисляемых средств и флаг
//    доступности пополнения счета, а при возвращении значения добавляет к балансу бонусы.
//    3. Создайте следующие функции:
//    - изменение имени счета. Реализуйте проверку на пустоту и не совпадение имени с текущим счетом. Меняйте имя, только если проверки пройдены
//    - добавление бонусов. Выполните проверку на положительное значение и приплюсуйте новые бонусы к бонусам пользователя
//    - перерасчет бонусов. Приватная функция. Вызывается каждый раз, когда баланс меняется в сторону увеличения (добавьте didSet для приватной пары баланса).
//    Добавляет бонусы в размере 10% от текущего баланса пользователя (обратите внимание, что расчет 10% должен происходить от приватной stored property баланса).
//    Добавляйте бонусы за счет вызова функции `добавление бонусов`
//    - снять средства. Можно снять средства, только если запрошенная сумма меньше или равна балансу пользователя. Сначала снимаются бонусы, а затем деньги с основного баланса.
//    - закрыть счет. Устанавливает количество бонусов и баланс в 0, закрывает возможность пополнения счета.
//    4. Создайте счёт пользователя. Поменяйте имя счета, цвет иконки. Зачислите какую-нибудь сумму на счет. Узнайте, сколько бонусов на счету и какой текущий баланс.
//    Добавьте ещё денег на счет. Снимите 100 рублей и выведите количество бонусов и текущий баланс. Снимите все оставшиеся средства и закройте счёт.
//
//    ===============================================
//                          Task 4
//    ===============================================
//
//    1. Реализуйте класс Vehicle:
//     - свойство maxSpeed
//     - свойство type - enum (motor, railed, waterСraft, airCraft)
//     - инициализатор со speed и type
//     - функция startMoving(). Сообщает в консоль, что транспортное средство начинает движение
//     - функция printInfo - выводит информацию о максимальной скорости, типе и имени транспортного средства
//     2. Создайте класс Car и Train, отнаследовав их от Vehicle
//     3. Добавьте в класс машины еще одно свойство - производителя (enum из 2 задания), а в класс поезда - количество посадочных мест.
//     4. В классе Car и Train создайте 3 инициализатора:
//     - пустой инициализатор, в котором установите значение производителя / количества посадочных мест по умолчанию и вызовите инициализатор супер-класса.
//     - инициализатор с аргументом производителя / количеством посадочных мест, вызовите инициализатор супер-класса
//     - инициализатор с аргументом производителя / количеством посадочных мест и аргументами speed и type. Вызовите инициализатор супер-класса
//     5. Переопределите функцию startMoving() в обоих классах, чтобы в каждом случае оно выводила какое транспортное средство начинает движение.
//     В классе машины вызовите суперкласс, а в классе поезда не вызывайте.
//     6. Создайте экземпляры класса транспортного средства, машины и поезда. Вызовите у всех функции startMoving() и printInfo()
//
//    ===============================================
//                          Task 5
//    ===============================================
//
//    1. Создайте класс Building. Добавьте в него следующие свойства, функции и нужные инициализаторы:
//    - материал (перечисление). Невозможно переопределить в дочерних классах
//    - цвет. сделайте переменную приватной на изменения
//    - стоимость
//    - дата постройки (год). невозможно изменить
//    - функция вывода информации о строении
//    - функция перекрасить. меняет цвет строения
//    2. Создайте класс ApartmentBuilding, отнаследовав его от Building. Добавьте в него следующие свойства и функции:
//    - количество квартир
//    - инициализатор с количеством квартир
//    - инициализатор с количеством квартир и остальными свойствами суперкласса
//    - переопределите свойство стоимости, которое при вычитывании значения увеличивает стоимость здания на 10% (в дочернем классе сделать из stored property - computed property)
//    - переопределите функцию перекрасить. Теперь она перекрашивает дом во все цвета, кроме розового.
//    - переопределите функцию вывода информации о строении. Она вызывает реализацию суперкласса и добавляет ещё информацию о количестве квартир.
//    3. Создайте класс Cottage, отнаследовав его от Building. Добавьте в него следующее:
//    - флаг находится ли коттедж в городской или сельской местности. Сделайте сеттер приватным. Невозможно переопределить в дочерних классах.
//    - переопределите свойство цвета, добавив в него didSet, который выводит информацию о старом цвете дома и его новом цвете.
//    - переопределите свойство стоимости, которое при вычитывании значения увеличивает стоимость здания на 7%, если оно в сельской местности, и на 15%, если в городской
//    - переопределите функцию вывода информации о строении. Она выводит информацию о местности коттеджа и его стоимости. Не вызывайте реализацию родительского класса.
//    - создайте функцию затопить печь, которая включает печь, только если коттедж находится в сельской местности. Функция недоступна к переопределению в дочернем классе.
//    - добавьте инициализаторы, если необходимо
//    4. Создайте класс SummerCottage, отнаследовав его от Cottage. Сделайте так, чтобы от класса нельзя было наследоваться.
//    - добавьте флаг арендован ли коттедж.
//    - добавьте инициализатор
//    - переопределите функцию перекрасить. Строение вообще невозможно перекрасить
//    - переопределите свойство стоимости, которое при вычитывании значения увеличивает стоимость здания на 20%
//
