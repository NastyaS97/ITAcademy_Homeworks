//import UIKit
//
//
//    ===============================================
//          Task 1 (Задание 2 из playGround)
//    ===============================================
//
//    Создайте функцию, которая принимает массив типа Cat и напишите логику, которая:
//     - считает количество CreepyCat в массиве
//     - если в массиве найден CuttieCat, то выводит в консоль его имя и уровень милоты
//     - если это объект HappyCat, то вызовите функцию getCatDescription
//     - возвращает массив котов, который состоит из котиков, не попавших под условия выше
//
//    Все классы, которые фигурируют в задаче, скопируйте в плэйграунд домашней работы из плэйграунда, с которым работали в классе.
//
//    ===============================================
//                           Task 2
//    ===============================================
//
//    1. Создайте базовый класс «Артист», у которого должны быть следующие свойства:
//    - имя: разрешить только чтение
//    - возраст: сделать проверку на положительное значение
//    - страна работы (Беларусь, Россия, Украина, Польша, Турция)
//    - стаж работы: проверка на положительные значения
//    - зарплата в неделю: артист может отказаться её озвучивать
//    - зарплата за день: вычисляемая переменная на основе зарплаты в неделю (с учетом того, что рабочая неделя - 5 дней)
//    - сколько процентов своей жизни работал артистом: вычисляемая переменная на основе данных возраста и стажа работы (подумайте, как вычислить)
//    - классовая переменная со средней зарплатой артиста
//    2. Добавьте 2 разных инициализатора (имя Артиста в каждом инициализаторе - обязательно)
//    3. Добавьте следующие методы:
//    - статический метод, возвращающий все возможные страны работы артиста. Сделать недоступным к переопределению
//    - статический метод, выводящий информацию о названии класса в консоль. Сделать доступным к переопределению в дочерних классах
//    - метод с информацией об артисте - выводит все свойства в читаемом виде. Недоступен к переопределению.
//    - метод «выступить», выводящий информацию об артисте, в каком жанре выступает и что показывает
//    4. Создать классы «Музыкант», «Художник», «Танцор», наследующиеся от артиста.
//    5. В каждом классе переопределить метод с информацией о классе, вызвав реализацию родителя и добавив описание дочернего класса. Добавить следующую логику каждому классу:
//    - Танцор отказывается выступать, если его зарплата за день меньше 100, о чем сообщает в консоль.
//    - Художник не хочет использовать своё родное имя, заменяя его на сценическое, которое состоит из перемешанных букв родного имени.
//    - Музыканты не хотят работать в Турции, уезжая в любую другую страну из списка доступных, а также у них появляется новый параметр - любимый инструмент.
//    6. Создать по два экземпляра каждого класса (в том числе родителя) с различными данными, положив их в массив типа Артист.
//    7. Пройтись по массиву и вызвать у каждого элемента метод выступить.
//    Если в списке попался Танцор, то вывести его зарплату за день, если Музыкант, то отобразить любимый инструмент.
